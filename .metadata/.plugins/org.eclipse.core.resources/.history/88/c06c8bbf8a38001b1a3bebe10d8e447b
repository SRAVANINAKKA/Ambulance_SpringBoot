package com.cg.Ambulance;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.springframework.http.MediaType;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;

import com.cg.Ambulance.domain.Ambulance;
import com.cg.Ambulance.service.AmbulanceService;
import com.cg.Ambulance.service.MapValidationErrorService;
import com.cg.Ambulance.web.AmbulanceController;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(SpringExtension.class)
@WebMvcTest(controllers = AmbulanceController.class)
public class AmbulanceControllerTest {
	@Autowired
	MockMvc mockMvc;
	
	@MockBean
	AmbulanceService  ambulanceService;
	
	@MockBean
	MapValidationErrorService mapValidationErrorService;
private static ObjectMapper mapper = new ObjectMapper();
	
	@Test
	
	public void test_Save_GivenAmbulance() throws Exception{
		Ambulance newambulance = new Ambulance(1, "AE12", "12345","driver1", "user1", "Delhi", null, "Accepted");
		
		Mockito.when(ambulanceService.save(ArgumentMatchers.any())).thenReturn(newambulance);
		String json = mapper.writeValueAsString(newambulance);
		mockMvc.perform(post("/api/ambulances").contentType(MediaType.APPLICATION_JSON).characterEncoding("utf-8")
		.content(json).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
		.andExpect(status().isOk())
		.andExpect(jsonPath("$").isMap()) 
		.andExpect(jsonPath("booking_id").value(1))
		.andExpect(jsonPath("bookingIdentifier").value("AE12"))
		.andExpect(jsonPath("ambulance_Number").value("12345"))
		.andExpect(jsonPath("driverName").value("driver1"))
		.andExpect(jsonPath("userName").value("user1"))
		.andExpect(jsonPath("userAddress").value("Delhi"))
		.andExpect(jsonPath("dofbooking").value(2020-12-23))
		.andExpect(jsonPath("bookingResult").value("Accepted"));
		
	}
	
	
	
	
	
	
	
}
